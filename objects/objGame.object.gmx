<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Level to test
testLevel = "FULL HOUSE";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global Variables
//All Global variables should be set in this script.
global.devmode = false;
global.spawnObject = 0;
global.godmode = 0;
global.steamon = 0;
global.playerIndex=0
display_set_gui_size(view_wview, view_hview);
sxeasy_init();
global.restartedmusic=working_directory+"\Static.mp3"

//Loads Volume.
global.mvol=1;
global.svol=1;
scrLoadVol()

//Colors for Alienware systems.
global.alienware=0;
if file_exists(working_directory+"\alienware") {
global.alienware=1;
scrAlienWareInit()
scrAlienWarePink()
} else global.alienware=0;

//Controller
global.controllertype=1;
global.upkey='W';
global.downkey='S';
global.leftkey='A';
global.rightkey='D';
global.restartkey='R';
global.controller=0;
global.maskload=0;

global.shake=0;
global.cutscene=0;

global.bonuslist=ds_list_create();
global.bonustime=0;
global.newmasks=0;

global.talked=1;
global.i=0;
global.surfaces=1;
global.blood=1;
if file_exists(working_directory+"\blood") global.blood=0;
if file_exists(working_directory+"\surfaces") global.surfaces=0;
global.surfacesprites=0;

global.paused=0;
global.surf1=surface_create(room_width,room_height+64);
surface_set_target(global.surf1);
draw_clear_alpha(c_black,0);
surface_alpha();
surface_reset_target();
global.surf2=surface_create(640*3,480*3);
surface_set_target(global.surf2);
draw_clear_alpha(c_black,0);
surface_alpha();
surface_reset_target();
global.surf3=surface_create(640*3,480*3);
surface_set_target(global.surf3);
draw_clear_alpha(c_black,0);
surface_alpha();
surface_reset_target();

global.resetstory=0;
global.comboflash=0;
global.parttitle[0]="PART ONE.";
global.parttitle[1]="PHONECALLS.";
global.nextlevel=rmTutorial;
global.sequence=rmSequence1;
global.revisit=0;
global.maskon=1;
global.maskindex=0;
scrLoadUnlocked();//
scrLoadAchievements();
scrCheckLetters();
scrCheckGuns();
scrCheckMasks();

//misc
scrInitScore();
global.done=0
global.title="TEST"
global.maskindex=0
global.maskon=0
global.depthDeath=0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Local Variables
projectTitle=game_display_name+" (version "+string(GM_version)+")"
messageAlpha=0;
song = -1;
intro = 0;
dir=0
last_ammo = 0;
last_sprite = 0;

startingRoom = "DEVOLVER";
if (global.devmode==1){
startingRoom = testLevel
}

preview_name="objUndefined"
preview=0
preview_angle=0
preview_index=0
preview_count=sprite_get_number(object_get_sprite(global.spawnObject))
eraser_index=0
color1=0

temp1=120
temp2=120

devmenu=false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Creation
instance_create(0,0,objScanlines)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start a Room
//The point of this script is to let you quickly test rooms without having to initialize a bunch of shit


switch (startingRoom) {
    case "DEVOLVER"     : room=rmSplashDevolver         ; break;
// Phonecalls
    case "THE METRO"    : scrStartLevel ("THE METRO"    , "PRELUDE"             , rmTrainstationEntrance    , rmSequence1   , "Paris2"              ); break;
    case "NO TALK"      : scrStartLevel ("NO TALK"      , "FIRST CHAPTER"       , rmApartment1Entrance      , rmSequence2   , "Crystals"            ); break;
    case "OVERDOSE"     : scrStartLevel ("OVERDOSE"     , "SECOND CHAPTER"      , rmApartment2Entrance      , rmSequence3   , "Hotline"             ); break;
    case "DECADENCE"    : scrStartLevel ("DECADENCE"    , "THIRD CHAPTER"       , rmHouse1Downstairs        , rmSequence4   , "Hydrogen"            ); break;
// Questions 
    case "TENSION"      : scrStartLevel ("TENSION"      , "FOURTH CHAPTER"      , rmHouse5Downstairs        , rmSequence5   , "Paris2"              ); break;
    case "FULL HOUSE"   : scrStartLevel ("FULL HOUSE"   , "FIFTH CHAPTER"       , rmHouse2Downstairs        , rmSequence6   , "Crystals"            ); break;
    case "CLEAN HIT"    : scrStartLevel ("CLEAN HIT"    , "SIXTH CHAPTER"       , rmHotelEntrance           , rmSequence7   , "Hotline"             ); break;
    case "NEIGHBORS"    : scrStartLevel ("NEIGHBORS"    , "SEVENTH CHAPTER"     , rmBuildingFloor1          , rmSequence8   , "Hydrogen"            ); break;
// Visitations
    case "PUSH IT"      : scrStartLevel ("PUSH IT"      , "EIGHT CHAPTER"       , rmHouse3Downstairs        , rmSequence9   , "Perturbator"         ); break;
    case "CRACKDOWN"    : scrStartLevel ("CRACKDOWN"    , "NINTH CHAPTER"       , rmSwatDownstairs          , rmSequence10  , "Crystals"            ); break;
    case "HOT&amp;HEAVY"    : scrStartLevel ("HOT&amp;HEAVY"    , "TENTH CHAPTER"       , rmHouse4Middle            , rmSequence11  , "Hotline"             ); break;
    case "DEADLINE"     : scrStartLevel ("DEADLINE"     , "ELEVENTH CHAPTER"    , rmOfficeEntrance          , rmSequence12  , "Hydrogen"            ); break;
// Connection
    case "TRAUMA"       : scrStartLevel ("TRAUMA"       , "TWELFTH CHAPTER"     , rmHospitalTitle           , rmSequence12bDownstairs, "Flatline"   ); break;
    case "ASSAULT"      : scrStartLevel ("ASSAULT"      , "TIRTEENTH CHAPTER"   , rmPoliceHQFloor1          , rmSequence13  , "Knock"               ); break;
    case "VENGEANCE"    : scrStartLevel ("VENGEANCE"    , "FOURTEENTH CHAPTER"  , rmBossClubFloor1          , rmSequence14  , "InnerAnimal"         ); break;
    case "SHOWDOWN"     : scrStartLevel ("SHOWDOWN"     , "FINAL CHAPTER"       , rmMansionEntrance         , rmChapter     , "TurfMain"            ); break;
// Answers
    case "SAFEHOUSE"    : scrStartLevel ("SAFEHOUSE"    , "SIXTEENTH CHAPTER"   , rmNoodleShop              , rmMCBar       , "ToTheTop"            ); break;
    case "FUN&amp;GAMES"    : scrStartLevel ("FUN&amp;GAMES"    , "SEVENTEENTH CHAPTER" , rmArcadeDownstairs        , rmMCSequence2 , "Musikk2"             ); break;
    case "PRANKCALL"    : scrStartLevel ("PRANKCALL"    , "EIGHTEENTH CHAPTER"  , rmPhoneHomEntranceBiker   , rmSequence3   , "Knock"               ); break;
    case "RESOLUTION"   : scrStartLevel ("RESOLUTION"   , "NINETEENTH CHAPTER"  , rmJanitors                , rmMCSequence4 , "InnerAnimal"         ); break;
// Bonus
    case "HIGHBALL"     : scrStartLevel ("HIGHBALL"     , "BONUS CHAPTER"       , rmHighballer              , rmChapter     , "Perturbator"         ); break;
    case "EXPOSED"      : scrStartLevel ("EXPOSED"      , "SPECIAL CHAPTER"     , rmEurogamer               , rmChapter     , "ToTheTop"            ); break;
    default: room=startingRoom;
    }

sxeasy_play(song)
//scrInitGlobals();
//global.devmode=1
//instance_create(x,y,objPlaceCharacter)

if global.devmode=true{
game_save("restart.dat")
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player Indexes
if instance_exists(objPlayerJacket) global.playerIndex=0
if instance_exists(objPlayerBiker)  global.playerIndex=1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key Combinations
if devmenu=false exit
if keyboard_check(vk_shift) exit

if keyboard_check_pressed(ord("Q"))  {
    preview_index-=1
    if preview_index &lt;= 0 {
        preview_index = preview_count-1
    }
    devPlaySFX(sndPickUp)
}

if keyboard_check_pressed(ord("E"))  {
    preview_index+=1
    if preview_index &gt;= preview_count {
        preview_index=0
    }
    devPlaySFX(sndPickUp)
}

/*
x=floor( x / 16 ) * 16
y=floor( y / 16 ) * 16
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Key Combinations
if devmenu=false exit
if (global.devmode == 0) exit
if (!instance_exists(objEffector)) exit

if keyboard_check_pressed(ord("C")) {
    with objKillable instance_destroy();
}

if keyboard_check_pressed(ord("Z"))  {
    if instance_exists(objPlayer){
    objPlayer.ammo += 100;
    devPlaySFX(sndPickUp)
    }
}

if keyboard_check_pressed(ord("E"))  {
    if instance_exists(objPlayerJacket) and instance_exists(objEffector) {
        last_ammo=objPlayerJacket.ammo
        last_sprite=objPlayerJacket.sprite_index
        global.executionx=objPlayer.x
        global.executiony=objPlayer.y
        with objPlayerJacket instance_destroy();
        my_id=instance_create(objEffector.x,objEffector.y,objPlayerJacket);
        my_id.ammo=last_ammo
        my_id.sprite_index=last_sprite
        devPlaySFX(sndTeleport)
        effect_create_below(ef_ellipse, objEffector.x, objEffector.y, 1, c_aqua);
    }
}

if keyboard_check_pressed(ord("Q"))  {
my_id=instance_create(objEffector.x,objEffector.y,global.spawnObject);
my_id.image_angle=preview_angle

if global.spawnObject&gt;0{
    my_id.image_index=preview_index
}

devPlaySFX(sndHitWall)
}

if keyboard_check_pressed(ord("G"))  {
global.godmode=!global.godmode
}

if keyboard_check_pressed(ord("U"))  {
with objFurniture {
instance_destroy();
}
}


if keyboard_check_pressed(vk_escape)  {
with all game_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Forward
if devmenu=false exit
if keyboard_check(vk_shift){
preview_angle+=10
}
else{
global.spawnObject+=1
preview_count=sprite_get_number(object_get_sprite(global.spawnObject))

if preview_index &gt;= preview_count {
        preview_index=0
    }
 if preview_index &lt;= 0 {
        preview_index = preview_count-1
    }
}

exit
if keyboard_check(vk_control){
temp1-=1
}else{
temp2-=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Back
if devmenu=false exit
if keyboard_check(vk_shift){
preview_angle-=10
}
else{
global.spawnObject-=1
preview_count=sprite_get_number(object_get_sprite(global.spawnObject))

if preview_index &gt;= preview_count {
        preview_index=0
    }
 if preview_index &lt;= 0 {
        preview_index = preview_count-1
    }
}

exit
if keyboard_check(vk_control){
temp1+=1
}else{
temp2+=1
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.devmode == false) exit 
if devmenu=false{
txtDev(8,8,"Press [1] to open Dev Menu",fntDescription,0.5)
}

if devmenu=false exit
/// User Interface


//  Draw Background.
devDrawWindow(sprUIRectangle,24,16,128,128)
//scrDrawRectangle(24,16,128,218,c_teal,true)

//  Time          .  
t = date_current_datetime();    //  Store the current time.
h = date_get_hour(t);           //  Get the hour portion of that time.
m = date_get_minute(t);         //  Get the minute portion of the time.
s = date_get_second(t);         //  Get the second potion of the time.
time = string(h) + ":" + string(m) + ":" + string(s);
date = string(current_day) + "/" + string (current_month) + "/" + string(current_year) +". "
frameRate= string(fps) + " fps" +" | "+string(fps_real) + "framerate"

//  Draw Object Preview Begins.
if object_get_sprite(global.spawnObject) &gt; -1
{
preview = object_get_sprite(global.spawnObject)
} else {
preview = sprMissing

}
var scale=0.5;

draw_sprite_ext(preview,preview_index,(32+temp1+1)*scale,(64+temp2+1)*scale,scale,scale,preview_angle,c_black,0.5)
draw_sprite_ext(preview,preview_index,(32+temp1)*scale,(64+temp2)*scale,scale,scale,preview_angle,c_white,1)
//  Draw Object Preview Ends.

//  All text related stuff begins here.
var frameCounter = 0 // frameCounter displays the current frame of the object you're about to place.
var godToggle = "OFF" // Initializes variable godToggle

if global.godmode &gt; 0 { // If God Mode is not 0 that means god mode is on. as such godToggle should display equal to "ON",
godToggle = "ON"
}else{
godToggle = "OFF"
}

if preview_count&gt;1{
frameCounter="("+ string(preview_index+1) +"/"+ string(preview_count) + ")"
}else{
frameCounter="1"
}

/*  
    If a letter is uppercase add a space before it.
    Remove the first tree letters of the object name.
    Make resulting text all text uppercase. 
    The end result is: if an object is called something like "objAcidBath"; it will be displayed as "ACID BATH" by the Dev Menu.
*/
preview_name = string_upper(string_delete(
string_replace(string_replace(string_replace(string_replace(string_replace(string_replace(
string_replace(string_replace(string_replace(string_replace(string_replace(string_replace(
string_replace(string_replace(string_replace(string_replace(string_replace(string_replace(
string_replace(string_replace(string_replace(string_replace(string_replace(string_replace(
string_replace(string_replace(
object_get_name(global.spawnObject)
,"A"," A")
,"B"," B")
,"C"," C")
,"D"," D")
,"E"," E")
,"F"," F")
,"G"," G")
,"H"," H")
,"I"," I")
,"J"," J")
,"K"," K")
,"L"," L")
,"M"," M")
,"N"," N")
,"O"," O")
,"P"," P")
,"Q"," Q")
,"R"," R")
,"S"," S")
,"T"," T")
,"U"," U")
,"V"," V")
,"W"," W")
,"X"," X")
,"Y"," Y")
,"Z"," Z")
,1,3))

//  Draw Text.

    //  Title.
    txtHotline2(40,24,"DevMenu",fntPointShow,0.50,c_aqua,c_red)
  
    //  Information.
    txtDev(
    32,40,      // Position
    "________________________________________________" // String
    +"#"+projectTitle
    +"#"+"Today is " + date + time 
    +"#"+frameRate
    +"#"+"________________________________________________"
    +"#"+"Room: "+room_get_name(room)
    +"#"+"SHIFT + C = CLEAR AREA"
    +"#"+"SHIFT + Z = +100 AMMO"
    +"#"+"SHIFT + E = TELEPORT"
    +"#"+"SHIFT + G = GOD MODE "+ godToggle
    +"#"+"SHIFT + U = DELETE ALL FURNITURE"
    +"#"+"________________________________________________"
    +"#"+"SHIFT + Q = SPAWN" + preview_name
    +"#"+"FRAME = " + frameCounter
    +"#"+"________________________________________________"
    ,fntDate    //Font 
    ,0.25       // Scale
  )
  
txtMessage(room_width/2,room_height/2,"Surface sucessfully destroyed.",fntHelvetica,1,messageAlpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Functionality

if messageAlpha&gt;0 messageAlpha-=0.01

if global.devmode=false exit
view_angle=0

if !instance_exists(objEffector) exit
if devmenu=false exit

// Draw Object Preview

draw_sprite_ext(preview,preview_index,objEffector.x,objEffector.y,1,1,preview_angle,c_white,0.5)
color1 = merge_color(c_black,merge_color(merge_color(c_fuchsia,c_aqua,0.5+lengthdir_x(0.5,dir*3.12)),c_red,0.125+lengthdir_y(0.125,dir*1.73)),0.75+lengthdir_y(0.25,dir*1.73))
dir+=0.25;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"Temporary" variables
// This are intended for help with positioning UI elements.
exit
txtDev(objEffector.x,objEffector.y,
"temp1 = " + string(temp1)
+"#"+
"temp2 = " + string(temp2)
,fntDate
,0.5
)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>devmenu=!devmenu
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
