<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>resX=453
resY=255
shadowColor = c_black
shadowAlpha = 0.5

//From 1 to 10
shadowQuality = 10

shadowSurface = surface_create(resX*shadowQuality,resY*shadowQuality);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!surface_exists(shadowSurface)){
shadowSurface = surface_create(resX*shadowQuality,resY*shadowQuality);
}

var viewX = view_xview[0]
var viewY = view_yview[0]

surface_set_target(shadowSurface);
draw_clear_alpha(c_black,0);

d3d_set_fog(true,shadowColor,0,1);



with (objSolid){
draw_sprite_ext(sprite_index,image_index,(x+3-viewX)*other.shadowQuality,(y+3-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,1)
}

with (objDoor){
draw_sprite_ext(sprite_index,image_index,(x+3-viewX)*other.shadowQuality,(y+3-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,1)
}


with (objFurniture){
draw_sprite_ext(sprite_index,image_index,(x+1-viewX)*other.shadowQuality,(y+1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,1)
}

with (objPlayerCar){
draw_sprite_ext(sprite_index,image_index,(x+1-viewX)*other.shadowQuality,(y+1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,1)
}


with (objBoss){
draw_sprite_ext(legsprite,legindex,(x+1-viewX)*other.shadowQuality,(y+1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,1)
draw_sprite_ext(sprite_index,image_index,(x+1-viewX)*other.shadowQuality,(y+1-viewY)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,image_angle,c_black,1)
}


with (objPlayerJacket){
draw_sprite_ext(legsprite,legindex,(x-viewX+1)*other.shadowQuality,(y-viewY+1)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality,legdir,c_black,1)
draw_sprite_ext(sprite_index,image_index,(x-viewX+1)*other.shadowQuality,(y-viewY+1)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality*left,dir,c_black,1)
draw_sprite_ext(pose_index,image_index,(x-viewX+1)*other.shadowQuality,(y-viewY+1)*other.shadowQuality,image_xscale*other.shadowQuality,image_yscale*other.shadowQuality*left,dir,c_black,1)
}



d3d_set_fog(false,c_white,0,0);

surface_reset_target();

draw_set_alpha(shadowAlpha);
//draw_surface(shadowSurface,viewX,viewY);
if surface_exists(shadowSurface){
    //draw_surface(shadowSurface,viewX,viewY)
    draw_surface_ext(shadowSurface, viewX, viewY, (1/shadowQuality),  (1/shadowQuality), 0, shadowColor, shadowAlpha);
}
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
